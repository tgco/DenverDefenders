Denver Defenders
New content notes

The following describes the steps and necessary assets to add new content
NOTE: In Eclipse, the android project folder must be refreshed to reflect
any changes to the assets folder.

===============================

Maze

The following directory and contents should be added to DenverDefenders/android/assets/MazeAssets/

-MyNewMaze
	childSprite.png
	preview.png
	myTileSet.png
	MyNewMaze.tmx
	-Levels
		minigame.xml
		anothergame.xml
		etc.xml
		boss.xml

Description of contents:
	childSprite.png
		This is the image used to draw children in the maze.  The name of this file must be
		childSprite.png

	preview.png
		This image is used as the button for selecting to play this maze.  The name of this
		file must be preview.png.
	
	myTileSet.png
		This is the tile set image that was used in the Tiled editor to create the tiled map.
		The name is flexible as long as the .tmx file references it.

	MyNewMaze.tmx
		This is the tiled map file generated by Tiled.  The name must match the parent directory
		name, which is the name of the maze.  The file must contain a layer named “Road” which
		only contains tiles which may be walked on.  One tile must have the “heroHQ” property
		(value of the property does not matter), where the character will start, and at least
		one tile must have the “minigame” property (value doesn’t matter), where a child
		object may be placed.  All other layers are ignored, and therefore as many as desired
		may be used for aesthetics (a ground and building layer are suggested).

	Levels
		This directory should contain all the possible minigame .xml files that are randomly
		selected when a child is found, and the boss.xml game file which is played at the HQ
		once all kids are saved.  The boss.xml file must be named “boss.xml”.  Other files
		may be named as desired.

Code modification:
	The name of the directory of the newly added maze must be added to the array of mazes in
	DenverDefenders/core/src/src/org/TheGivingChild/Screens/ScreenMazeSelect.java.  The two 
	possible arrays are superTotsLevels and regularLevels, where super tots levels should be 
	easy and aimed at 2-3 year, while regular can be more difficult.  The order of these
	arrays determines the unlocking order.  Unlock is handled automatically.

===============================

Minigame
	Minigames are defined by xml files.  The xml file should be placed in the Levels directory
	of the maze it can appear in (see maze directory structure for more info).

General structure
	<level name=“” background=“” description=“” >
		<object id=“” image=“” imageScale=“” x=“” y=“” >
			<continuous>
				<att type=“” . . . />
				. . .
			</continuous>
			<triggered>
				<att type=“” on=“” . . . />
				. . .
			</triggered>
			<input type=“” . . . />
		</object>
		<object . . . >
			. . .
		</object>
		<win>
			<cond val=“” />
			<cond val=“” />
			. . .
		</win>
		<lose>
			<cond val=“” />
			<cond val=“” />
			. . .
		</lose>
	</level>

Tag descriptions:
	level
		name does not appear in the app, but instead may be used for reference.  The background
		property is drawn as the background image and must be in android/assets/LevelBackgrounds/
		The description property should explain how to play and is shown on the transition into
		the level.

	object
		Represents an in game object.  id must be and integer.  image must be a file located in
		android/assets/LevelImages/.  imageScale is a multiplier that is applied to the width and
		height of the object and is an optional property.  If no scale is given, then the size of
		image will be used as the size of the object on a 1024x600 screen (the desktop app dimensions).
		Scaling to screen size is handled automatically regardless of the imageScale property.  x and y
		properties are the float values for position based on a 1024x600 screen.  These positions are
		automatically adjusted for different screen sizes.  The properties may be set to “rand_a_b”
		where a and b are floats to set the property to a random value between a and b.

	continuous
		Attribute tags within this tag have update called every frame.

	triggered
		Attribute tags within this tag have update called when the string condition given in the on
		property occurs.

	att
		The type property tells the xml reader which attribute object should be attached to the game object.
		All other properties for the tag will be passed in an args hash object to the attribute constructor.
		Some properties of interest are throws and on.  An attribute with throws=“condition” will notify 
		the engine that “condition” has occured when the attribute has update called.  An att with on=“condition”
		will have its update method called when it is alerted that the condition has occurred.

	input
		The type parameter defines which input object should be attached to the object.  The remaining
		properties are passed in an args hash object to the input constructor

	win/lose
		The enclosed cond tags define when this game is won or lost.  Win/lose occurs when all the enclosed
		cond tags have occurred.

	cond
		Defines a condition to wait for in the win/lose tag with the val=“” property.  One val of note is
		“timeout” which triggers when the minigame clock ends.

Code modification:
	No code modification is necessary unless the attribute or input desired is not available.  The current att and
	input types are located in DenverDefenders/core/src/org/TheGivingChild/Engine/XML/AttributeEnum.java and
	InputListenerEnums.java.  To add a new input type, add a new enum type to the InputListenerEnums and override
	the necessary methods.  To add a new attribute, add a new enum to the AttributeEnum and override the necessary
	methods, and then create the attribute in Engine/Attributes by extending the base class Attribute.  The base class
	contains the methods update, which should progress the attribute behavior, and setup, which runs once on creation
	to do any necessary calculations.

===============================

PowerUp

The following should be added to DenverDefenders/android/assets/PowerUps/

-powername
	button.png
	buttonUsed.png
	etc.png

Description of contents:
	button.png
		The image used for this power on an unlock screen and in the game.  Tapped to used the power.

	buttonUsed.png
		The image used for this power once it has been used up.  Typically the same and button.png but
		with some transparency.

	etc.png
		Anything else needed for the power

Code modification:
	To allow the power to be unlocked, it must be added to the kidsPowerUps or totsPowerUps map in
	DenverDefenders/core/src/org/TheGivingChild/Engine/ProgressionData.java where the key is the level
	number that must be beat to unlock the power, and the value is the name of the powerup which must
	match the directory name for the power assets.  To allow the power to be constructed, an enum for it
	must be added to Engine/PowerUps/PowerUpEnum.java and the necessary functions overriden.  Lastly, 
	implement the power up by implementing the PowerUp interface, where the update function runs every
	frame while the power is active, and must return true when it is done so that the powe is removed.